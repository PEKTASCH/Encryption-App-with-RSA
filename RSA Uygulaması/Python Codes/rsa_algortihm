import tkinter as tk
from tkinter import filedialog, messagebox
from sympy import isprime, mod_inverse
import random

# RSA algoritması için gerekli fonksiyonlar
def generate_large_prime(keysize=1024):
    while True:
        num = random.getrandbits(keysize)
        if isprime(num):
            return num

def generate_keypair(keysize=1024):
    p = generate_large_prime(keysize)
    q = generate_large_prime(keysize)
    n = p * q
    phi = (p - 1) * (q - 1)
    e = 7
    d = mod_inverse(e, phi)
    return ((e, n), (d, n))

def encrypt(plain_text, public_key):
    e, n = public_key
    encrypted_text = [pow(ord(char), e, n) for char in plain_text]
    return encrypted_text

def decrypt(encrypted_text, private_key):
    d, n = private_key
    decrypted_text = ''.join([chr(pow(char, d, n)) for char in encrypted_text])
    return decrypted_text

def encrypt_file(input_file_path, output_file_path, public_key):
    with open(input_file_path, 'rb') as f:
        file_data = f.read()
    encrypted_data = [pow(byte, public_key[0], public_key[1]) for byte in file_data]
    with open(output_file_path, 'w') as f:
        for item in encrypted_data:
            f.write("%s\n" % item)

def decrypt_file(input_file_path, output_file_path, private_key):
    with open(input_file_path, 'r') as f:
        encrypted_data = f.readlines()
    encrypted_data = [int(item.strip()) for item in encrypted_data]
    decrypted_data = bytearray([pow(item, private_key[0], private_key[1]) for item in encrypted_data])
    with open(output_file_path, 'wb') as f:
        f.write(decrypted_data)

class RSAApp:
    def __init__(self, root):
        self.root = root
        self.root.title("RSA Şifreleme Uygulaması")

        self.public_key = None
        self.private_key = None

        # Anahtar boyutunu girdiği bölüm
        self.keysize_label = tk.Label(root, text="Anahtar Boyutu:")
        self.keysize_label.pack()
        self.keysize_entry = tk.Entry(root)
        self.keysize_entry.pack()
        self.keysize_entry.insert(0, "1024")  # Varsayılan değer

        # Anahtar üretme bölümü
        self.key_frame = tk.Frame(root)
        self.key_frame.pack(pady=10)
        
        self.generate_key_button = tk.Button(self.key_frame, text="Anahtar Çifti Oluştur", command=self.generate_keys)
        self.generate_key_button.pack()

        # Anahtar gösterimi için metin kutuları
        self.public_key_label = tk.Label(root, text="Açık Anahtar")
        self.public_key_label.pack()
        self.public_key_text = tk.Text(root, height=4, width=50)
        self.public_key_text.pack()
        self.public_key_text.config(state=tk.DISABLED)

        self.private_key_label = tk.Label(root, text="Özel Anahtar")
        self.private_key_label.pack()
        self.private_key_text = tk.Text(root, height=4, width=50)
        self.private_key_text.pack()
        self.private_key_text.config(state=tk.DISABLED)

        # Manuel şifreleme ve çözme için metin girişleri ve butonlar
        self.manual_encrypt_frame = tk.Frame(root)
        self.manual_encrypt_frame.pack(pady=10)

        self.plain_text_label = tk.Label(self.manual_encrypt_frame, text="Metin:")
        self.plain_text_label.pack(side=tk.LEFT)
        self.plain_text_entry = tk.Entry(self.manual_encrypt_frame, width=50)
        self.plain_text_entry.pack(side=tk.LEFT)

        self.manual_public_key_label = tk.Label(root, text="Açık Anahtar (e,n):")
        self.manual_public_key_label.pack()
        self.manual_public_key_entry = tk.Entry(root, width=50)
        self.manual_public_key_entry.pack()

        self.encrypt_manual_button = tk.Button(root, text="Metni Manuel Şifrele", command=self.manual_encrypt_text)
        self.encrypt_manual_button.pack(pady=5)

        self.encrypted_text_label = tk.Label(root, text="Şifrelenmiş Metin")
        self.encrypted_text_label.pack()
        self.encrypted_text_box = tk.Text(root, height=10, width=50)
        self.encrypted_text_box.pack()

        self.manual_private_key_label = tk.Label(root, text="Özel Anahtar (d,n):")
        self.manual_private_key_label.pack()
        self.manual_private_key_entry = tk.Entry(root, width=50)
        self.manual_private_key_entry.pack()

        self.decrypt_manual_button = tk.Button(root, text="Metni Manuel Çöz", command=self.manual_decrypt_text)
        self.decrypt_manual_button.pack(pady=5)

        self.decrypted_text_label = tk.Label(root, text="Çözülmüş Metin")
        self.decrypted_text_label.pack()
        self.decrypted_text_box = tk.Text(root, height=10, width=50)
        self.decrypted_text_box.pack()

        # Dosya şifreleme/çözme bölümü
        self.file_frame = tk.Frame(root)
        self.file_frame.pack(pady=10)

        self.encrypt_file_button = tk.Button(self.file_frame, text="Dosya Şifrele", command=self.encrypt_file)
        self.encrypt_file_button.pack(side=tk.LEFT, padx=5)

        self.decrypt_file_button = tk.Button(self.file_frame, text="Dosya Çöz", command=self.decrypt_file)
        self.decrypt_file_button.pack(side=tk.LEFT, padx=5)

    def generate_keys(self):
        try:
            keysize = int(self.keysize_entry.get())
            self.public_key, self.private_key = generate_keypair(keysize)
            self.public_key_text.config(state=tk.NORMAL)
            self.public_key_text.delete("1.0", tk.END)
            self.public_key_text.insert(tk.END, f"{self.public_key[0]}, {self.public_key[1]}\n")
            self.public_key_text.config(state=tk.DISABLED)

            self.private_key_text.config(state=tk.NORMAL)
            self.private_key_text.delete("1.0", tk.END)
            self.private_key_text.insert(tk.END, f"{self.private_key[0]}, {self.private_key[1]}\n")
            self.private_key_text.config(state=tk.DISABLED)

            messagebox.showinfo("Anahtar Çifti", "Anahtarlar başarıyla oluşturuldu.")
        except ValueError:
            messagebox.showerror("Hata", "Geçerli bir anahtar boyutu girin.")

    def manual_encrypt_text(self):
        plain_text = self.plain_text_entry.get()
        if not plain_text:
            messagebox.showerror("Hata", "Lütfen şifrelenecek metni girin.")
            return
        public_key_str = self.manual_public_key_entry.get()
        if not public_key_str:
            messagebox.showerror("Hata", "Lütfen açık anahtarı girin.")
            return
        try:
            public_key = tuple(map(int, public_key_str.split(',')))
            encrypted_text = encrypt(plain_text, public_key)
            self.encrypted_text_box.config(state=tk.NORMAL)
            self.encrypted_text_box.delete("1.0", tk.END)
            self.encrypted_text_box.insert(tk.END, str(encrypted_text))
        except:
            messagebox.showerror("Hata", "Geçersiz anahtar formatı.")
        self.encrypted_text_box.config(state=tk.NORMAL)

    def manual_decrypt_text(self):
        encrypted_text_str = self.encrypted_text_box.get("1.0", tk.END).strip()
        if not encrypted_text_str:
            messagebox.showerror("Hata", "Lütfen çözülecek metni girin.")
            return
        private_key_str = self.manual_private_key_entry.get()
        if not private_key_str:
            messagebox.showerror("Hata", "Lütfen özel anahtarı girin.")
            return
        try:
            encrypted_text = eval(encrypted_text_str)
            private_key = tuple(map(int, private_key_str.split(',')))
            decrypted_text = decrypt(encrypted_text, private_key)
            self.decrypted_text_box.config(state=tk.NORMAL)
            self.decrypted_text_box.delete("1.0", tk.END)
            self.decrypted_text_box.insert(tk.END, decrypted_text)
        except:
            messagebox.showerror("Hata", "Geçersiz anahtar veya metin formatı.")
        self.decrypted_text_box.config(state=tk.NORMAL)

    def encrypt_file(self):
        input_file_path = filedialog.askopenfilename()
        if not input_file_path:
            return
        output_file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if not output_file_path:
            return
        public_key_str = self.manual_public_key_entry.get()
        if not public_key_str:
            messagebox.showerror("Hata", "Lütfen açık anahtarı girin.")
            return
        try:
            public_key = tuple(map(int, public_key_str.split(',')))
            encrypt_file(input_file_path, output_file_path, public_key)
            messagebox.showinfo("Başarılı", "Dosya başarıyla şifrelendi.")
        except:
            messagebox.showerror("Hata", "Geçersiz anahtar formatı.")

    def decrypt_file(self):
        input_file_path = filedialog.askopenfilename()
        if not input_file_path:
            return
        output_file_path = filedialog.asksaveasfilename()
        if not output_file_path:
            return
        private_key_str = self.manual_private_key_entry.get()
        if not private_key_str:
            messagebox.showerror("Hata", "Lütfen özel anahtarı girin.")
            return
        try:
            private_key = tuple(map(int, private_key_str.split(',')))
            decrypt_file(input_file_path, output_file_path, private_key)
            messagebox.showinfo("Başarılı", "Dosya başarıyla çözüldü.")
        except:
            messagebox.showerror("Hata", "Geçersiz anahtar formatı.")

if __name__ == "__main__":
    root = tk.Tk()
    app = RSAApp(root)
    root.mainloop()
